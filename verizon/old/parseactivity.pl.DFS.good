#!/usr/bin/perl -w

use strict;

use XML::XPath;
use XML::XPath::XMLParser;
use OpenOffice::OODoc;
use Graph;
use Graph::Traversal::DFS;
use Data::Dumper;


#list of all RSA models
my @emxFileList = `ls asset.emx`;

my $L1HeadingStyle = 'Heading 1';
my $L2HeadingStyle = 'Heading 2';

foreach my $modelFile (@emxFileList) {
	print "Current model file is " . $modelFile;
	chomp $modelFile;
	die "No file specified!" unless ($modelFile);

	my $parser = XML::XPath->new(filename => $modelFile);

	#get the model name, should only return one element - 0th element
	my @modelNameArray = $parser->find('//uml:Model')->get_nodelist;
	my $modelName = $modelNameArray[0]->getAttribute('name');
	#____________________________


	my @activityDiagrams = $parser->find('//packagedElement[@xmi:type="uml:Activity"]')->get_nodelist;
	#print "activities has ". scalar @activities ." elements \n";
	foreach my $activityDiagram (@activityDiagrams) {
		
		my %nodes;

		#create the directed graph
		my $graph = Graph->new;

		#get the name
		my $activityDiagramName = $activityDiagram->getAttribute('name');
		print "Processing $activityDiagramName \n";


		#construct filename
		my $fileName = 'output/bhushan/'.$modelName."-".$activityDiagramName.'.odt';

		#eliminate blanks
		$fileName =~ s/ +//g;
		
		#create a new document
		my $document = odfDocument(file => $fileName, create => 'text');

		#add a heading
		$document->appendHeading(text	=> $activityDiagramName, style => 'Title');

		#create the Actors heading
		$document->appendHeading(text => 'Actors', level => '1', style => $L1HeadingStyle);

		#actors live in ActivityPartitions
		my @actors = $parser->find('./group[@xmi:type="uml:ActivityPartition"]',$activityDiagram)->get_nodelist;

		#first, lets get the total number of diagrams
#		my $totalActors = scalar @actors;

		my $row = 0;
		foreach my $actor (@actors) {
			my $actorName = $actor->getAttribute('name');
			$document->appendParagraph
				(
				text    => $actorName,
				style   => 'Text body'
				);
		}
		
		#new Activities heading
		$document->appendHeading(text => 'Activities', level =>'1', style => $L1HeadingStyle);
#------------
		my @edges = $parser->find('./edge', $activityDiagram)->get_nodelist;

#		print "Found edges: \n";

#		print @edges;

		foreach my $edge (@edges) {
			my $source = $edge->getAttribute('source');
			my $target = $edge->getAttribute('target');
#			print "source: $source target: $target \n";
			$graph->add_edge($source,$target);
		}
#------------

		#how many activities?
		my @activities = $parser->find('./node',$activityDiagram)->get_nodelist;
		my $totalActivities = scalar @activities;

		my $columns = 2;
		$document->appendTable("ActivitiesTable", $totalActivities, $columns);
		$document->cellValue("ActivitiesTable", 0, 0, 'Activity Name');
		$document->cellValue("ActivitiesTable", 0, 1, 'Description');
		$row = 1;

		my $precondition = '';
		my $postcondition = '';

		foreach my $node (@activities) {
			my $commentBody = $node->find('ownedComment/body')->string_value;
			my $nodeName = $node->getAttribute('name');
			my $nodeId = $node->getAttribute('xmi:id');
			my $nodeType = $node->getAttribute('xmi:type');
			my $nodeSource = $node->getAttribute('incoming');
			my $nodeTarget = $node->getAttribute('outgoing');

			$nodes{$nodeId}=$nodeName;
#			print "Adding $nodes{$nodeId} ";
			my $skip = 0;

#			print "node: $nodeName \n";
#			print "nodeType: $nodeType \n";
#			print "comment: $commentBody \n";

			if (($nodeType eq 'uml:InitialNode') || ($nodeType eq 'uml:ActivityFinalNode') || ($nodeName eq '')) {
				$skip = 1;
			}

			$document->cellValue("ActivitiesTable", $row, 0, $nodeName) unless ($skip == 1);
			$document->cellValue("ActivitiesTable", $row, 1, $commentBody) unless ($skip == 1);

			#populate the pre/post conditions which are stored as documentation within Intial|Final Nodes
			$precondition = $commentBody if ($nodeType eq 'uml:InitialNode');
			$postcondition = $commentBody if ($nodeType eq 'uml:ActivityFinalNode');

			$row++;
		}

		$document->appendHeading(text => 'Preconditions', level =>'1', style => $L1HeadingStyle);
		$document->appendParagraph
      	(
         	text    => $precondition, 
         	style   => 'Text body'
         );

		$document->appendHeading(text => 'Postconditions', level =>'1', style => $L1HeadingStyle);
		$document->appendParagraph
      	(
         	text    => $postcondition,
         	style   => 'Text body'
         );

			

		#write the doc to disk
#		$document->save;
		#correct the language.
#		my $metadata  = odfMeta($document);
#		print $metadata->language();

#		print Dumper(%nodes);
		my $search = Graph::Traversal::DFS->new($graph);
		$search->dfs;
		my @searchedNodes = $search->postorder;
		foreach (reverse $search->dfs) {
			print $nodes{$_} . "\n";
		}

#		print Dumper($search->dfs);
#		foreach my $key (keys %searchedNodes) {
#			my $value = $searchedNodes{$key};
#			print "key is $key value is $value \n";
#		}
#		print "Graph is $graph \n";
		print "______________________________________\n";
	}


}
